// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task_manager/Domain"

	mock "github.com/stretchr/testify/mock"
)

// ITaskUsecase is an autogenerated mock type for the ITaskUsecase type
type ITaskUsecase struct {
	mock.Mock
}

type ITaskUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *ITaskUsecase) EXPECT() *ITaskUsecase_Expecter {
	return &ITaskUsecase_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *ITaskUsecase) CreateTask(ctx context.Context, task *domain.Task) (*domain.Task, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) (*domain.Task, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) *domain.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITaskUsecase_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type ITaskUsecase_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task *domain.Task
func (_e *ITaskUsecase_Expecter) CreateTask(ctx interface{}, task interface{}) *ITaskUsecase_CreateTask_Call {
	return &ITaskUsecase_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, task)}
}

func (_c *ITaskUsecase_CreateTask_Call) Run(run func(ctx context.Context, task *domain.Task)) *ITaskUsecase_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *ITaskUsecase_CreateTask_Call) Return(_a0 *domain.Task, _a1 error) *ITaskUsecase_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITaskUsecase_CreateTask_Call) RunAndReturn(run func(context.Context, *domain.Task) (*domain.Task, error)) *ITaskUsecase_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, id
func (_m *ITaskUsecase) DeleteTask(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITaskUsecase_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type ITaskUsecase_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ITaskUsecase_Expecter) DeleteTask(ctx interface{}, id interface{}) *ITaskUsecase_DeleteTask_Call {
	return &ITaskUsecase_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, id)}
}

func (_c *ITaskUsecase_DeleteTask_Call) Run(run func(ctx context.Context, id string)) *ITaskUsecase_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ITaskUsecase_DeleteTask_Call) Return(_a0 error) *ITaskUsecase_DeleteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ITaskUsecase_DeleteTask_Call) RunAndReturn(run func(context.Context, string) error) *ITaskUsecase_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByID provides a mock function with given fields: ctx, id
func (_m *ITaskUsecase) GetTaskByID(ctx context.Context, id string) (*domain.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITaskUsecase_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type ITaskUsecase_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ITaskUsecase_Expecter) GetTaskByID(ctx interface{}, id interface{}) *ITaskUsecase_GetTaskByID_Call {
	return &ITaskUsecase_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", ctx, id)}
}

func (_c *ITaskUsecase_GetTaskByID_Call) Run(run func(ctx context.Context, id string)) *ITaskUsecase_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ITaskUsecase_GetTaskByID_Call) Return(_a0 *domain.Task, _a1 error) *ITaskUsecase_GetTaskByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITaskUsecase_GetTaskByID_Call) RunAndReturn(run func(context.Context, string) (*domain.Task, error)) *ITaskUsecase_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function with given fields: ctx
func (_m *ITaskUsecase) GetTasks(ctx context.Context) ([]domain.Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITaskUsecase_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type ITaskUsecase_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ITaskUsecase_Expecter) GetTasks(ctx interface{}) *ITaskUsecase_GetTasks_Call {
	return &ITaskUsecase_GetTasks_Call{Call: _e.mock.On("GetTasks", ctx)}
}

func (_c *ITaskUsecase_GetTasks_Call) Run(run func(ctx context.Context)) *ITaskUsecase_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ITaskUsecase_GetTasks_Call) Return(_a0 []domain.Task, _a1 error) *ITaskUsecase_GetTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITaskUsecase_GetTasks_Call) RunAndReturn(run func(context.Context) ([]domain.Task, error)) *ITaskUsecase_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: ctx, id, task
func (_m *ITaskUsecase) UpdateTask(ctx context.Context, id string, task *domain.Task) (*domain.Task, error) {
	ret := _m.Called(ctx, id, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Task) (*domain.Task, error)); ok {
		return rf(ctx, id, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Task) *domain.Task); ok {
		r0 = rf(ctx, id, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.Task) error); ok {
		r1 = rf(ctx, id, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITaskUsecase_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type ITaskUsecase_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - task *domain.Task
func (_e *ITaskUsecase_Expecter) UpdateTask(ctx interface{}, id interface{}, task interface{}) *ITaskUsecase_UpdateTask_Call {
	return &ITaskUsecase_UpdateTask_Call{Call: _e.mock.On("UpdateTask", ctx, id, task)}
}

func (_c *ITaskUsecase_UpdateTask_Call) Run(run func(ctx context.Context, id string, task *domain.Task)) *ITaskUsecase_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.Task))
	})
	return _c
}

func (_c *ITaskUsecase_UpdateTask_Call) Return(_a0 *domain.Task, _a1 error) *ITaskUsecase_UpdateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITaskUsecase_UpdateTask_Call) RunAndReturn(run func(context.Context, string, *domain.Task) (*domain.Task, error)) *ITaskUsecase_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewITaskUsecase creates a new instance of ITaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITaskUsecase {
	mock := &ITaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
